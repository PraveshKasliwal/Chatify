"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var https = require("https");

var http = require("http");

var request = require("request");

var querystring = require("query-string");

var URL = require("url").URL;

var isValidUrl = s => {
  if (!s || s === null) return false;

  try {
    if (s === "api.nexmo.com") return s;
    var o = new URL(s);
    return o.host;
  } catch (err) {
    return false;
  }
};

class HttpClient {
  constructor(options, credentials) {
    var hostOverride = isValidUrl(options.host);
    this.credentials = credentials;
    this.host = hostOverride ? hostOverride : "rest.nexmo.com";
    this.port = options.port || 443;
    this.https = options.https || https;
    this.http = options.http || http;
    this.headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      Accept: "application/json"
    };
    this.logger = options.logger;
    this.timeout = options.timeout;
    this.requestLib = request;

    if (options.userAgent) {
      this.headers["User-Agent"] = options.userAgent;
    }
  }

  request(endpoint, method, callback) {
    var skipJsonParsing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var customResponseParser = arguments.length > 4 ? arguments[4] : undefined;

    if (typeof method === "function") {
      callback = method;
      endpoint.method = endpoint.method || "GET";
    } else if (typeof method !== "undefined") {
      endpoint.method = method;
    }

    var options = {
      host: endpoint.host ? endpoint.host : this.host,
      port: this.port,
      path: endpoint.path,
      method: endpoint.method,
      headers: Object.assign({}, this.headers, endpoint.headers)
    };

    if (this.timeout !== undefined) {
      options.timeout = this.timeout;
    } // Allow existing headers to be overridden
    // Allow new headers to be added


    if (endpoint.headers) {
      Object.keys(endpoint.headers).forEach(function (key) {
        options.headers[key] = endpoint.headers[key];
      });
    } // the output here can returnn one of two options:
    // - Using `sig` & `timestamp` in the JSON body
    // - Using `sig` & `timestamp` in the query string


    if (this.credentials.signatureSecret && this.credentials.signatureMethod) {
      // you must first add a timestamp
      var params;
      var splitPath;
      var path; // determine if the response should be querystring or JSON body

      if (!endpoint.body) {
        // this branch is for query string
        splitPath = options.path.split(/\?(.+)/);
        path = splitPath[0];
        params = querystring.parse(splitPath[1]);
      } else {
        // this section is for JSON body
        params = JSON.parse(endpoint.body);
      } // add timestamp if not already present


      if (!params.timestamp) {
        params.timestamp = (new Date().getTime() / 1000 | 0).toString();
      } // strip API Secret


      delete params.api_secret;
      var hash = this.credentials.generateSignature(params);
      params.sig = hash;

      if (!endpoint.body) {
        //this section is for querystring
        var query = ""; // rebuild query

        Object.keys(params).sort().forEach(key => {
          query += "&" + key + "=" + encodeURI(params[key]);
        }); // replace the first & with ?

        query = query.replace(/&/i, "?");
        options.path = "".concat(path).concat(query);
      } else {
        endpoint.body = JSON.stringify(params);
      }
    }

    this.logger.info("Request:", options, "\nBody:", endpoint.body);
    var request;

    if (options.port === 443) {
      request = this.https.request(options);
    } else {
      request = this.http.request(options);
    }

    request.end(endpoint.body); // Keep an array of String or Buffers,
    // depending on content type (binary or JSON) of response

    var responseData = [];
    request.on("response", response => {
      var isBinary = response.headers["content-type"] === "application/octet-stream";

      if (!isBinary) {
        response.setEncoding("utf8");
      }

      response.on("data", chunk => {
        responseData.push(chunk);
      });
      response.on("end", () => {
        this.logger.info("response ended:", response.statusCode);

        if (callback) {
          if (isBinary) {
            responseData = Buffer.concat(responseData);
          }

          this.__parseResponse(response, responseData, endpoint.method, callback, skipJsonParsing, customResponseParser);
        }
      });
      response.on("close", e => {
        if (e) {
          this.logger.error("problem with API request detailed stacktrace below ");
          this.logger.error(e);
          callback(e);
        }
      });
    });
    request.on("error", e => {
      this.logger.error("problem with API request detailed stacktrace below ");
      this.logger.error(e);
      callback(e);
    });
  }

  __parseResponse(httpResponse, data, method, callback, skipJsonParsing, customResponseParser) {
    var isArrayOrBuffer = data instanceof Array || data instanceof Buffer;

    if (!isArrayOrBuffer) {
      throw new Error("data should be of type Array or Buffer");
    }

    var status = httpResponse.statusCode;
    var headers = httpResponse.headers;
    var response = null;
    var error = null;

    try {
      if (status >= 500) {
        error = {
          message: "Server Error",
          statusCode: status
        };
      } else if (httpResponse.headers["content-type"] === "application/octet-stream") {
        response = data;
      } else if (status === 429) {
        // 429 does not return a parsable body
        if (!headers["retry-after"]) {
          // retry based on allowed per second
          var retryAfterMillis = method === "POST" ? 1000 / 2 : 1000 / 5;
          headers["retry-after"] = retryAfterMillis;
        }

        error = {
          body: data.join("")
        };
      } else if (status === 204) {
        response = null;
      } else if (status >= 400 || status < 200) {
        error = {
          body: JSON.parse(data.join("")),
          headers
        };
      } else if (method !== "DELETE") {
        if (!!skipJsonParsing) {
          response = data.join("");
        } else {
          response = JSON.parse(data.join(""));
        }
      } else {
        response = data;
      }
    } catch (parseError) {
      this.logger.error(parseError);
      this.logger.error("could not convert API response to JSON, above error is ignored and raw API response is returned to client");
      this.logger.error("Raw Error message from API ");
      this.logger.error("\"".concat(data, "\""));
      error = {
        status: status,
        message: "The API response could not be parsed.",
        body: data.join(""),
        parseError: parseError
      };
    }

    if (error) {
      error.statusCode = status;
      error.headers = headers;
    }

    if (typeof callback === "function") {
      if (typeof customResponseParser === "function") {
        // don't try to parse the response on errors
        if (response) {
          response = customResponseParser(response);
        }
      }

      callback(error, response);
    }
  }

  _addLimitedAccessMessageToErrors(callback, limitedAccessStatus) {
    return function (err, data) {
      if (err && err.status == limitedAccessStatus) {
        err._INFO_ = "This endpoint may need activating on your account. Please email support@nexmo.com for more information";
      }

      return callback(err, data);
    };
  }

  get(path, params, callback) {
    var useJwt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var useBasicAuth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    if (!callback) {
      if (typeof params == "function") {
        callback = params;
        params = {};
      }
    }

    params = params || {};

    if (!useJwt && !useBasicAuth) {
      params["api_key"] = this.credentials.apiKey;
      params["api_secret"] = this.credentials.apiSecret;
    }

    path = path + "?" + querystring.stringify(params);
    var headers = {
      "Content-Type": "application/json"
    };

    if (useJwt) {
      headers["Authorization"] = "Bearer ".concat(this.credentials.generateJwt());
    }

    if (useBasicAuth) {
      headers["Authorization"] = "Basic ".concat(Buffer.from(this.credentials.apiKey + ":" + this.credentials.apiSecret).toString("base64"));
    }

    this.request({
      path: path,
      headers
    }, "GET", callback);
  }

  delete(path, callback, useJwt, useBasicAuth) {
    var params = {};

    if (!useJwt && !useBasicAuth) {
      params["api_key"] = this.credentials.apiKey;
      params["api_secret"] = this.credentials.apiSecret;
    }

    var headers = {};

    if (useBasicAuth) {
      headers["Authorization"] = "Basic ".concat(Buffer.from(this.credentials.apiKey + ":" + this.credentials.apiSecret).toString("base64"));
    }

    path = path + "?" + querystring.stringify(params);
    this.request({
      path: path,
      headers
    }, "DELETE", callback);
  }

  postFile(path, options, callback, useJwt) {
    var qs = {};

    if (!useJwt) {
      qs["api_key"] = this.credentials.apiKey;
      qs["api_secret"] = this.credentials.apiSecret;
    }

    if (Object.keys(qs).length) {
      var joinChar = "?";

      if (path.indexOf(joinChar) !== -1) {
        joinChar = "&";
      }

      path = path + joinChar + querystring.stringify(qs);
    }

    var file = options.file;
    delete options.file; // We don't send this as metadata

    var formData = {};

    if (file) {
      formData["filedata"] = {
        value: file,
        options: {
          filename: options.filename || null
        }
      };
    }

    if (options.info) {
      formData.info = JSON.stringify(options.info);
    }

    if (options.url) {
      formData.url = options.url;
    }

    var protocol = this.port === 443 ? "https://" : "http://";
    this.requestLib.post({
      url: protocol + this.host + path,
      formData: formData,
      headers: {
        Authorization: "Bearer ".concat(this.credentials.generateJwt())
      }
    }, callback);
  }

  post(path, params, callback, useJwt) {
    var qs = {};

    if (!useJwt) {
      qs["api_key"] = this.credentials.apiKey;
      qs["api_secret"] = this.credentials.apiSecret;
    }

    var joinChar = "?";

    if (path.indexOf(joinChar) !== -1) {
      joinChar = "&";
    }

    path = path + joinChar + querystring.stringify(qs);
    this.request({
      path: path,
      body: querystring.stringify(params)
    }, "POST", callback);
  }

  postJson(path, params, callback, useJwt, useBasicAuth) {
    var qs = {};

    if (!useJwt && !useBasicAuth) {
      qs["api_key"] = this.credentials.apiKey;
      qs["api_secret"] = this.credentials.apiSecret;
    }

    var joinChar = "?";

    if (path.indexOf(joinChar) !== -1) {
      joinChar = "&";
    }

    path = path + joinChar + querystring.stringify(qs);
    var headers = {
      "Content-Type": "application/json"
    };

    if (useBasicAuth) {
      headers["Authorization"] = "Basic ".concat(Buffer.from(this.credentials.apiKey + ":" + this.credentials.apiSecret).toString("base64"));
    }

    this.request({
      path: path,
      body: JSON.stringify(params),
      headers
    }, "POST", callback);
  }

  postUseQueryString(path, params, callback, useJwt) {
    params = params || {};

    if (!useJwt) {
      params["api_key"] = this.credentials.apiKey;
      params["api_secret"] = this.credentials.apiSecret;
    }

    path = path + "?" + querystring.stringify(params);
    this.request({
      path: path
    }, "POST", callback);
  }

}

var _default = HttpClient;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJodHRwcyIsInJlcXVpcmUiLCJodHRwIiwicmVxdWVzdCIsInF1ZXJ5c3RyaW5nIiwiVVJMIiwiaXNWYWxpZFVybCIsInMiLCJvIiwiaG9zdCIsImVyciIsIkh0dHBDbGllbnQiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJjcmVkZW50aWFscyIsImhvc3RPdmVycmlkZSIsInBvcnQiLCJoZWFkZXJzIiwiQWNjZXB0IiwibG9nZ2VyIiwidGltZW91dCIsInJlcXVlc3RMaWIiLCJ1c2VyQWdlbnQiLCJlbmRwb2ludCIsIm1ldGhvZCIsImNhbGxiYWNrIiwic2tpcEpzb25QYXJzaW5nIiwiY3VzdG9tUmVzcG9uc2VQYXJzZXIiLCJwYXRoIiwiT2JqZWN0IiwiYXNzaWduIiwidW5kZWZpbmVkIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzaWduYXR1cmVTZWNyZXQiLCJzaWduYXR1cmVNZXRob2QiLCJwYXJhbXMiLCJzcGxpdFBhdGgiLCJib2R5Iiwic3BsaXQiLCJwYXJzZSIsIkpTT04iLCJ0aW1lc3RhbXAiLCJEYXRlIiwiZ2V0VGltZSIsInRvU3RyaW5nIiwiYXBpX3NlY3JldCIsImhhc2giLCJnZW5lcmF0ZVNpZ25hdHVyZSIsInNpZyIsInF1ZXJ5Iiwic29ydCIsImVuY29kZVVSSSIsInJlcGxhY2UiLCJzdHJpbmdpZnkiLCJpbmZvIiwiZW5kIiwicmVzcG9uc2VEYXRhIiwib24iLCJyZXNwb25zZSIsImlzQmluYXJ5Iiwic2V0RW5jb2RpbmciLCJjaHVuayIsInB1c2giLCJzdGF0dXNDb2RlIiwiQnVmZmVyIiwiY29uY2F0IiwiX19wYXJzZVJlc3BvbnNlIiwiZSIsImVycm9yIiwiaHR0cFJlc3BvbnNlIiwiZGF0YSIsImlzQXJyYXlPckJ1ZmZlciIsIkFycmF5IiwiRXJyb3IiLCJzdGF0dXMiLCJtZXNzYWdlIiwicmV0cnlBZnRlck1pbGxpcyIsImpvaW4iLCJwYXJzZUVycm9yIiwiX2FkZExpbWl0ZWRBY2Nlc3NNZXNzYWdlVG9FcnJvcnMiLCJsaW1pdGVkQWNjZXNzU3RhdHVzIiwiX0lORk9fIiwiZ2V0IiwidXNlSnd0IiwidXNlQmFzaWNBdXRoIiwiYXBpS2V5IiwiYXBpU2VjcmV0IiwiZ2VuZXJhdGVKd3QiLCJmcm9tIiwiZGVsZXRlIiwicG9zdEZpbGUiLCJxcyIsImxlbmd0aCIsImpvaW5DaGFyIiwiaW5kZXhPZiIsImZpbGUiLCJmb3JtRGF0YSIsInZhbHVlIiwiZmlsZW5hbWUiLCJ1cmwiLCJwcm90b2NvbCIsInBvc3QiLCJBdXRob3JpemF0aW9uIiwicG9zdEpzb24iLCJwb3N0VXNlUXVlcnlTdHJpbmciXSwic291cmNlcyI6WyIuLi9zcmMvSHR0cENsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG52YXIgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xudmFyIHJlcXVlc3QgPSByZXF1aXJlKFwicmVxdWVzdFwiKTtcbnZhciBxdWVyeXN0cmluZyA9IHJlcXVpcmUoXCJxdWVyeS1zdHJpbmdcIik7XG52YXIgVVJMID0gcmVxdWlyZShcInVybFwiKS5VUkw7XG5cbmNvbnN0IGlzVmFsaWRVcmwgPSAocykgPT4ge1xuICBpZiAoIXMgfHwgcyA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHMgPT09IFwiYXBpLm5leG1vLmNvbVwiKSByZXR1cm4gcztcbiAgICBsZXQgbyA9IG5ldyBVUkwocyk7XG4gICAgcmV0dXJuIG8uaG9zdDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5jbGFzcyBIdHRwQ2xpZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucywgY3JlZGVudGlhbHMpIHtcbiAgICBsZXQgaG9zdE92ZXJyaWRlID0gaXNWYWxpZFVybChvcHRpb25zLmhvc3QpO1xuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBjcmVkZW50aWFscztcbiAgICB0aGlzLmhvc3QgPSBob3N0T3ZlcnJpZGUgPyBob3N0T3ZlcnJpZGUgOiBgcmVzdC5uZXhtby5jb21gO1xuICAgIHRoaXMucG9ydCA9IG9wdGlvbnMucG9ydCB8fCA0NDM7XG4gICAgdGhpcy5odHRwcyA9IG9wdGlvbnMuaHR0cHMgfHwgaHR0cHM7XG4gICAgdGhpcy5odHRwID0gb3B0aW9ucy5odHRwIHx8IGh0dHA7XG4gICAgdGhpcy5oZWFkZXJzID0ge1xuICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfTtcbiAgICB0aGlzLmxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyO1xuICAgIHRoaXMudGltZW91dCA9IG9wdGlvbnMudGltZW91dDtcbiAgICB0aGlzLnJlcXVlc3RMaWIgPSByZXF1ZXN0O1xuXG4gICAgaWYgKG9wdGlvbnMudXNlckFnZW50KSB7XG4gICAgICB0aGlzLmhlYWRlcnNbXCJVc2VyLUFnZW50XCJdID0gb3B0aW9ucy51c2VyQWdlbnQ7XG4gICAgfVxuICB9XG5cbiAgcmVxdWVzdChcbiAgICBlbmRwb2ludCxcbiAgICBtZXRob2QsXG4gICAgY2FsbGJhY2ssXG4gICAgc2tpcEpzb25QYXJzaW5nID0gZmFsc2UsXG4gICAgY3VzdG9tUmVzcG9uc2VQYXJzZXJcbiAgKSB7XG4gICAgaWYgKHR5cGVvZiBtZXRob2QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2FsbGJhY2sgPSBtZXRob2Q7XG4gICAgICBlbmRwb2ludC5tZXRob2QgPSBlbmRwb2ludC5tZXRob2QgfHwgXCJHRVRcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtZXRob2QgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGVuZHBvaW50Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICB9XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGhvc3Q6IGVuZHBvaW50Lmhvc3QgPyBlbmRwb2ludC5ob3N0IDogdGhpcy5ob3N0LFxuICAgICAgcG9ydDogdGhpcy5wb3J0LFxuICAgICAgcGF0aDogZW5kcG9pbnQucGF0aCxcbiAgICAgIG1ldGhvZDogZW5kcG9pbnQubWV0aG9kLFxuICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5oZWFkZXJzLCBlbmRwb2ludC5oZWFkZXJzKSxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMudGltZW91dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvcHRpb25zLnRpbWVvdXQgPSB0aGlzLnRpbWVvdXQ7XG4gICAgfVxuXG4gICAgLy8gQWxsb3cgZXhpc3RpbmcgaGVhZGVycyB0byBiZSBvdmVycmlkZGVuXG4gICAgLy8gQWxsb3cgbmV3IGhlYWRlcnMgdG8gYmUgYWRkZWRcbiAgICBpZiAoZW5kcG9pbnQuaGVhZGVycykge1xuICAgICAgT2JqZWN0LmtleXMoZW5kcG9pbnQuaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIG9wdGlvbnMuaGVhZGVyc1trZXldID0gZW5kcG9pbnQuaGVhZGVyc1trZXldO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gdGhlIG91dHB1dCBoZXJlIGNhbiByZXR1cm5uIG9uZSBvZiB0d28gb3B0aW9uczpcbiAgICAvLyAtIFVzaW5nIGBzaWdgICYgYHRpbWVzdGFtcGAgaW4gdGhlIEpTT04gYm9keVxuICAgIC8vIC0gVXNpbmcgYHNpZ2AgJiBgdGltZXN0YW1wYCBpbiB0aGUgcXVlcnkgc3RyaW5nXG5cbiAgICBpZiAodGhpcy5jcmVkZW50aWFscy5zaWduYXR1cmVTZWNyZXQgJiYgdGhpcy5jcmVkZW50aWFscy5zaWduYXR1cmVNZXRob2QpIHtcbiAgICAgIC8vIHlvdSBtdXN0IGZpcnN0IGFkZCBhIHRpbWVzdGFtcFxuICAgICAgbGV0IHBhcmFtcztcbiAgICAgIGxldCBzcGxpdFBhdGg7XG4gICAgICBsZXQgcGF0aDtcblxuICAgICAgLy8gZGV0ZXJtaW5lIGlmIHRoZSByZXNwb25zZSBzaG91bGQgYmUgcXVlcnlzdHJpbmcgb3IgSlNPTiBib2R5XG4gICAgICBpZiAoIWVuZHBvaW50LmJvZHkpIHtcbiAgICAgICAgLy8gdGhpcyBicmFuY2ggaXMgZm9yIHF1ZXJ5IHN0cmluZ1xuICAgICAgICBzcGxpdFBhdGggPSBvcHRpb25zLnBhdGguc3BsaXQoL1xcPyguKykvKTtcbiAgICAgICAgcGF0aCA9IHNwbGl0UGF0aFswXTtcblxuICAgICAgICBwYXJhbXMgPSBxdWVyeXN0cmluZy5wYXJzZShzcGxpdFBhdGhbMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhpcyBzZWN0aW9uIGlzIGZvciBKU09OIGJvZHlcbiAgICAgICAgcGFyYW1zID0gSlNPTi5wYXJzZShlbmRwb2ludC5ib2R5KTtcbiAgICAgIH1cblxuICAgICAgLy8gYWRkIHRpbWVzdGFtcCBpZiBub3QgYWxyZWFkeSBwcmVzZW50XG4gICAgICBpZiAoIXBhcmFtcy50aW1lc3RhbXApIHtcbiAgICAgICAgcGFyYW1zLnRpbWVzdGFtcCA9ICgobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKSB8IDApLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHN0cmlwIEFQSSBTZWNyZXRcbiAgICAgIGRlbGV0ZSBwYXJhbXMuYXBpX3NlY3JldDtcblxuICAgICAgbGV0IGhhc2ggPSB0aGlzLmNyZWRlbnRpYWxzLmdlbmVyYXRlU2lnbmF0dXJlKHBhcmFtcyk7XG4gICAgICBwYXJhbXMuc2lnID0gaGFzaDtcblxuICAgICAgaWYgKCFlbmRwb2ludC5ib2R5KSB7XG4gICAgICAgIC8vdGhpcyBzZWN0aW9uIGlzIGZvciBxdWVyeXN0cmluZ1xuICAgICAgICBsZXQgcXVlcnkgPSBcIlwiO1xuXG4gICAgICAgIC8vIHJlYnVpbGQgcXVlcnlcbiAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zKVxuICAgICAgICAgIC5zb3J0KClcbiAgICAgICAgICAuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBxdWVyeSArPSBcIiZcIiArIGtleSArIFwiPVwiICsgZW5jb2RlVVJJKHBhcmFtc1trZXldKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAvLyByZXBsYWNlIHRoZSBmaXJzdCAmIHdpdGggP1xuICAgICAgICBxdWVyeSA9IHF1ZXJ5LnJlcGxhY2UoLyYvaSwgXCI/XCIpO1xuXG4gICAgICAgIG9wdGlvbnMucGF0aCA9IGAke3BhdGh9JHtxdWVyeX1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kcG9pbnQuYm9keSA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcIlJlcXVlc3Q6XCIsIG9wdGlvbnMsIFwiXFxuQm9keTpcIiwgZW5kcG9pbnQuYm9keSk7XG5cbiAgICB2YXIgcmVxdWVzdDtcblxuICAgIGlmIChvcHRpb25zLnBvcnQgPT09IDQ0Mykge1xuICAgICAgcmVxdWVzdCA9IHRoaXMuaHR0cHMucmVxdWVzdChvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdCA9IHRoaXMuaHR0cC5yZXF1ZXN0KG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJlcXVlc3QuZW5kKGVuZHBvaW50LmJvZHkpO1xuXG4gICAgLy8gS2VlcCBhbiBhcnJheSBvZiBTdHJpbmcgb3IgQnVmZmVycyxcbiAgICAvLyBkZXBlbmRpbmcgb24gY29udGVudCB0eXBlIChiaW5hcnkgb3IgSlNPTikgb2YgcmVzcG9uc2VcbiAgICB2YXIgcmVzcG9uc2VEYXRhID0gW107XG5cbiAgICByZXF1ZXN0Lm9uKFwicmVzcG9uc2VcIiwgKHJlc3BvbnNlKSA9PiB7XG4gICAgICB2YXIgaXNCaW5hcnkgPVxuICAgICAgICByZXNwb25zZS5oZWFkZXJzW1wiY29udGVudC10eXBlXCJdID09PSBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiO1xuICAgICAgaWYgKCFpc0JpbmFyeSkge1xuICAgICAgICByZXNwb25zZS5zZXRFbmNvZGluZyhcInV0ZjhcIik7XG4gICAgICB9XG5cbiAgICAgIHJlc3BvbnNlLm9uKFwiZGF0YVwiLCAoY2h1bmspID0+IHtcbiAgICAgICAgcmVzcG9uc2VEYXRhLnB1c2goY2h1bmspO1xuICAgICAgfSk7XG5cbiAgICAgIHJlc3BvbnNlLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcInJlc3BvbnNlIGVuZGVkOlwiLCByZXNwb25zZS5zdGF0dXNDb2RlKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgaWYgKGlzQmluYXJ5KSB7XG4gICAgICAgICAgICByZXNwb25zZURhdGEgPSBCdWZmZXIuY29uY2F0KHJlc3BvbnNlRGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fX3BhcnNlUmVzcG9uc2UoXG4gICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIHJlc3BvbnNlRGF0YSxcbiAgICAgICAgICAgIGVuZHBvaW50Lm1ldGhvZCxcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgc2tpcEpzb25QYXJzaW5nLFxuICAgICAgICAgICAgY3VzdG9tUmVzcG9uc2VQYXJzZXJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJlc3BvbnNlLm9uKFwiY2xvc2VcIiwgKGUpID0+IHtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgICAgIFwicHJvYmxlbSB3aXRoIEFQSSByZXF1ZXN0IGRldGFpbGVkIHN0YWNrdHJhY2UgYmVsb3cgXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGUpO1xuICAgICAgICAgIGNhbGxiYWNrKGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFwicHJvYmxlbSB3aXRoIEFQSSByZXF1ZXN0IGRldGFpbGVkIHN0YWNrdHJhY2UgYmVsb3cgXCIpO1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoZSk7XG4gICAgICBjYWxsYmFjayhlKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9fcGFyc2VSZXNwb25zZShcbiAgICBodHRwUmVzcG9uc2UsXG4gICAgZGF0YSxcbiAgICBtZXRob2QsXG4gICAgY2FsbGJhY2ssXG4gICAgc2tpcEpzb25QYXJzaW5nLFxuICAgIGN1c3RvbVJlc3BvbnNlUGFyc2VyXG4gICkge1xuICAgIGNvbnN0IGlzQXJyYXlPckJ1ZmZlciA9IGRhdGEgaW5zdGFuY2VvZiBBcnJheSB8fCBkYXRhIGluc3RhbmNlb2YgQnVmZmVyO1xuICAgIGlmICghaXNBcnJheU9yQnVmZmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkYXRhIHNob3VsZCBiZSBvZiB0eXBlIEFycmF5IG9yIEJ1ZmZlclwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0dXMgPSBodHRwUmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICBjb25zdCBoZWFkZXJzID0gaHR0cFJlc3BvbnNlLmhlYWRlcnM7XG5cbiAgICBsZXQgcmVzcG9uc2UgPSBudWxsO1xuICAgIHZhciBlcnJvciA9IG51bGw7XG5cbiAgICB0cnkge1xuICAgICAgaWYgKHN0YXR1cyA+PSA1MDApIHtcbiAgICAgICAgZXJyb3IgPSB7XG4gICAgICAgICAgbWVzc2FnZTogXCJTZXJ2ZXIgRXJyb3JcIixcbiAgICAgICAgICBzdGF0dXNDb2RlOiBzdGF0dXMsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBodHRwUmVzcG9uc2UuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9PT0gXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIlxuICAgICAgKSB7XG4gICAgICAgIHJlc3BvbnNlID0gZGF0YTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MjkpIHtcbiAgICAgICAgLy8gNDI5IGRvZXMgbm90IHJldHVybiBhIHBhcnNhYmxlIGJvZHlcbiAgICAgICAgaWYgKCFoZWFkZXJzW1wicmV0cnktYWZ0ZXJcIl0pIHtcbiAgICAgICAgICAvLyByZXRyeSBiYXNlZCBvbiBhbGxvd2VkIHBlciBzZWNvbmRcbiAgICAgICAgICBjb25zdCByZXRyeUFmdGVyTWlsbGlzID0gbWV0aG9kID09PSBcIlBPU1RcIiA/IDEwMDAgLyAyIDogMTAwMCAvIDU7XG4gICAgICAgICAgaGVhZGVyc1tcInJldHJ5LWFmdGVyXCJdID0gcmV0cnlBZnRlck1pbGxpcztcbiAgICAgICAgfVxuICAgICAgICBlcnJvciA9IHtcbiAgICAgICAgICBib2R5OiBkYXRhLmpvaW4oXCJcIiksXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gMjA0KSB7XG4gICAgICAgIHJlc3BvbnNlID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID49IDQwMCB8fCBzdGF0dXMgPCAyMDApIHtcbiAgICAgICAgZXJyb3IgPSB7XG4gICAgICAgICAgYm9keTogSlNPTi5wYXJzZShkYXRhLmpvaW4oXCJcIikpLFxuICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKG1ldGhvZCAhPT0gXCJERUxFVEVcIikge1xuICAgICAgICBpZiAoISFza2lwSnNvblBhcnNpbmcpIHtcbiAgICAgICAgICByZXNwb25zZSA9IGRhdGEuam9pbihcIlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNwb25zZSA9IEpTT04ucGFyc2UoZGF0YS5qb2luKFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzcG9uc2UgPSBkYXRhO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKHBhcnNlRXJyb3IpO1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgIFwiY291bGQgbm90IGNvbnZlcnQgQVBJIHJlc3BvbnNlIHRvIEpTT04sIGFib3ZlIGVycm9yIGlzIGlnbm9yZWQgYW5kIHJhdyBBUEkgcmVzcG9uc2UgaXMgcmV0dXJuZWQgdG8gY2xpZW50XCJcbiAgICAgICk7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcIlJhdyBFcnJvciBtZXNzYWdlIGZyb20gQVBJIFwiKTtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGBcIiR7ZGF0YX1cImApO1xuXG4gICAgICBlcnJvciA9IHtcbiAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgIG1lc3NhZ2U6IFwiVGhlIEFQSSByZXNwb25zZSBjb3VsZCBub3QgYmUgcGFyc2VkLlwiLFxuICAgICAgICBib2R5OiBkYXRhLmpvaW4oXCJcIiksXG4gICAgICAgIHBhcnNlRXJyb3I6IHBhcnNlRXJyb3IsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChlcnJvcikge1xuICAgICAgZXJyb3Iuc3RhdHVzQ29kZSA9IHN0YXR1cztcbiAgICAgIGVycm9yLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiBjdXN0b21SZXNwb25zZVBhcnNlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIC8vIGRvbid0IHRyeSB0byBwYXJzZSB0aGUgcmVzcG9uc2Ugb24gZXJyb3JzXG4gICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgIHJlc3BvbnNlID0gY3VzdG9tUmVzcG9uc2VQYXJzZXIocmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYWxsYmFjayhlcnJvciwgcmVzcG9uc2UpO1xuICAgIH1cbiAgfVxuXG4gIF9hZGRMaW1pdGVkQWNjZXNzTWVzc2FnZVRvRXJyb3JzKGNhbGxiYWNrLCBsaW1pdGVkQWNjZXNzU3RhdHVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChlcnIgJiYgZXJyLnN0YXR1cyA9PSBsaW1pdGVkQWNjZXNzU3RhdHVzKSB7XG4gICAgICAgIGVyci5fSU5GT18gPVxuICAgICAgICAgIFwiVGhpcyBlbmRwb2ludCBtYXkgbmVlZCBhY3RpdmF0aW5nIG9uIHlvdXIgYWNjb3VudC4gUGxlYXNlIGVtYWlsIHN1cHBvcnRAbmV4bW8uY29tIGZvciBtb3JlIGluZm9ybWF0aW9uXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIGRhdGEpO1xuICAgIH07XG4gIH1cblxuICBnZXQocGF0aCwgcGFyYW1zLCBjYWxsYmFjaywgdXNlSnd0ID0gZmFsc2UsIHVzZUJhc2ljQXV0aCA9IGZhbHNlKSB7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gcGFyYW1zO1xuICAgICAgICBwYXJhbXMgPSB7fTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgaWYgKCF1c2VKd3QgJiYgIXVzZUJhc2ljQXV0aCkge1xuICAgICAgcGFyYW1zW1wiYXBpX2tleVwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpS2V5O1xuICAgICAgcGFyYW1zW1wiYXBpX3NlY3JldFwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpU2VjcmV0O1xuICAgIH1cblxuICAgIHBhdGggPSBwYXRoICsgXCI/XCIgKyBxdWVyeXN0cmluZy5zdHJpbmdpZnkocGFyYW1zKTtcblxuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9O1xuICAgIGlmICh1c2VKd3QpIHtcbiAgICAgIGhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdID0gYEJlYXJlciAke3RoaXMuY3JlZGVudGlhbHMuZ2VuZXJhdGVKd3QoKX1gO1xuICAgIH1cbiAgICBpZiAodXNlQmFzaWNBdXRoKSB7XG4gICAgICBoZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IGBCYXNpYyAke0J1ZmZlci5mcm9tKFxuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzLmFwaUtleSArIFwiOlwiICsgdGhpcy5jcmVkZW50aWFscy5hcGlTZWNyZXRcbiAgICAgICkudG9TdHJpbmcoXCJiYXNlNjRcIil9YDtcbiAgICB9XG5cbiAgICB0aGlzLnJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICB9LFxuICAgICAgXCJHRVRcIixcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIGRlbGV0ZShwYXRoLCBjYWxsYmFjaywgdXNlSnd0LCB1c2VCYXNpY0F1dGgpIHtcbiAgICBsZXQgcGFyYW1zID0ge307XG4gICAgaWYgKCF1c2VKd3QgJiYgIXVzZUJhc2ljQXV0aCkge1xuICAgICAgcGFyYW1zW1wiYXBpX2tleVwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpS2V5O1xuICAgICAgcGFyYW1zW1wiYXBpX3NlY3JldFwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpU2VjcmV0O1xuICAgIH1cblxuICAgIGxldCBoZWFkZXJzID0ge307XG5cbiAgICBpZiAodXNlQmFzaWNBdXRoKSB7XG4gICAgICBoZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IGBCYXNpYyAke0J1ZmZlci5mcm9tKFxuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzLmFwaUtleSArIFwiOlwiICsgdGhpcy5jcmVkZW50aWFscy5hcGlTZWNyZXRcbiAgICAgICkudG9TdHJpbmcoXCJiYXNlNjRcIil9YDtcbiAgICB9XG4gICAgcGF0aCA9IHBhdGggKyBcIj9cIiArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShwYXJhbXMpO1xuXG4gICAgdGhpcy5yZXF1ZXN0KFxuICAgICAge1xuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgfSxcbiAgICAgIFwiREVMRVRFXCIsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICBwb3N0RmlsZShwYXRoLCBvcHRpb25zLCBjYWxsYmFjaywgdXNlSnd0KSB7XG4gICAgbGV0IHFzID0ge307XG4gICAgaWYgKCF1c2VKd3QpIHtcbiAgICAgIHFzW1wiYXBpX2tleVwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpS2V5O1xuICAgICAgcXNbXCJhcGlfc2VjcmV0XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlTZWNyZXQ7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKHFzKS5sZW5ndGgpIHtcbiAgICAgIGxldCBqb2luQ2hhciA9IFwiP1wiO1xuICAgICAgaWYgKHBhdGguaW5kZXhPZihqb2luQ2hhcikgIT09IC0xKSB7XG4gICAgICAgIGpvaW5DaGFyID0gXCImXCI7XG4gICAgICB9XG4gICAgICBwYXRoID0gcGF0aCArIGpvaW5DaGFyICsgcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHFzKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlID0gb3B0aW9ucy5maWxlO1xuICAgIGRlbGV0ZSBvcHRpb25zLmZpbGU7IC8vIFdlIGRvbid0IHNlbmQgdGhpcyBhcyBtZXRhZGF0YVxuXG4gICAgY29uc3QgZm9ybURhdGEgPSB7fTtcblxuICAgIGlmIChmaWxlKSB7XG4gICAgICBmb3JtRGF0YVtcImZpbGVkYXRhXCJdID0ge1xuICAgICAgICB2YWx1ZTogZmlsZSxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGZpbGVuYW1lOiBvcHRpb25zLmZpbGVuYW1lIHx8IG51bGwsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZm8pIHtcbiAgICAgIGZvcm1EYXRhLmluZm8gPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmluZm8pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnVybCkge1xuICAgICAgZm9ybURhdGEudXJsID0gb3B0aW9ucy51cmw7XG4gICAgfVxuXG4gICAgbGV0IHByb3RvY29sID0gdGhpcy5wb3J0ID09PSA0NDMgPyBcImh0dHBzOi8vXCIgOiBcImh0dHA6Ly9cIjtcblxuICAgIHRoaXMucmVxdWVzdExpYi5wb3N0KFxuICAgICAge1xuICAgICAgICB1cmw6IHByb3RvY29sICsgdGhpcy5ob3N0ICsgcGF0aCxcbiAgICAgICAgZm9ybURhdGE6IGZvcm1EYXRhLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuY3JlZGVudGlhbHMuZ2VuZXJhdGVKd3QoKX1gLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHBvc3QocGF0aCwgcGFyYW1zLCBjYWxsYmFjaywgdXNlSnd0KSB7XG4gICAgbGV0IHFzID0ge307XG4gICAgaWYgKCF1c2VKd3QpIHtcbiAgICAgIHFzW1wiYXBpX2tleVwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpS2V5O1xuICAgICAgcXNbXCJhcGlfc2VjcmV0XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlTZWNyZXQ7XG4gICAgfVxuXG4gICAgbGV0IGpvaW5DaGFyID0gXCI/XCI7XG4gICAgaWYgKHBhdGguaW5kZXhPZihqb2luQ2hhcikgIT09IC0xKSB7XG4gICAgICBqb2luQ2hhciA9IFwiJlwiO1xuICAgIH1cblxuICAgIHBhdGggPSBwYXRoICsgam9pbkNoYXIgKyBxdWVyeXN0cmluZy5zdHJpbmdpZnkocXMpO1xuXG4gICAgdGhpcy5yZXF1ZXN0KFxuICAgICAge1xuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICBib2R5OiBxdWVyeXN0cmluZy5zdHJpbmdpZnkocGFyYW1zKSxcbiAgICAgIH0sXG4gICAgICBcIlBPU1RcIixcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHBvc3RKc29uKHBhdGgsIHBhcmFtcywgY2FsbGJhY2ssIHVzZUp3dCwgdXNlQmFzaWNBdXRoKSB7XG4gICAgbGV0IHFzID0ge307XG4gICAgaWYgKCF1c2VKd3QgJiYgIXVzZUJhc2ljQXV0aCkge1xuICAgICAgcXNbXCJhcGlfa2V5XCJdID0gdGhpcy5jcmVkZW50aWFscy5hcGlLZXk7XG4gICAgICBxc1tcImFwaV9zZWNyZXRcIl0gPSB0aGlzLmNyZWRlbnRpYWxzLmFwaVNlY3JldDtcbiAgICB9XG5cbiAgICBsZXQgam9pbkNoYXIgPSBcIj9cIjtcbiAgICBpZiAocGF0aC5pbmRleE9mKGpvaW5DaGFyKSAhPT0gLTEpIHtcbiAgICAgIGpvaW5DaGFyID0gXCImXCI7XG4gICAgfVxuXG4gICAgcGF0aCA9IHBhdGggKyBqb2luQ2hhciArIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShxcyk7XG5cbiAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH07XG4gICAgaWYgKHVzZUJhc2ljQXV0aCkge1xuICAgICAgaGVhZGVyc1tcIkF1dGhvcml6YXRpb25cIl0gPSBgQmFzaWMgJHtCdWZmZXIuZnJvbShcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscy5hcGlLZXkgKyBcIjpcIiArIHRoaXMuY3JlZGVudGlhbHMuYXBpU2VjcmV0XG4gICAgICApLnRvU3RyaW5nKFwiYmFzZTY0XCIpfWA7XG4gICAgfVxuXG4gICAgdGhpcy5yZXF1ZXN0KFxuICAgICAge1xuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgfSxcbiAgICAgIFwiUE9TVFwiLFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgcG9zdFVzZVF1ZXJ5U3RyaW5nKHBhdGgsIHBhcmFtcywgY2FsbGJhY2ssIHVzZUp3dCkge1xuICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICBpZiAoIXVzZUp3dCkge1xuICAgICAgcGFyYW1zW1wiYXBpX2tleVwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpS2V5O1xuICAgICAgcGFyYW1zW1wiYXBpX3NlY3JldFwiXSA9IHRoaXMuY3JlZGVudGlhbHMuYXBpU2VjcmV0O1xuICAgIH1cblxuICAgIHBhdGggPSBwYXRoICsgXCI/XCIgKyBxdWVyeXN0cmluZy5zdHJpbmdpZnkocGFyYW1zKTtcbiAgICB0aGlzLnJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICB9LFxuICAgICAgXCJQT1NUXCIsXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSHR0cENsaWVudDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBQ0EsSUFBSUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFsQjs7QUFDQSxJQUFJRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLElBQUlHLFdBQVcsR0FBR0gsT0FBTyxDQUFDLGNBQUQsQ0FBekI7O0FBQ0EsSUFBSUksR0FBRyxHQUFHSixPQUFPLENBQUMsS0FBRCxDQUFQLENBQWVJLEdBQXpCOztBQUVBLElBQU1DLFVBQVUsR0FBSUMsQ0FBRCxJQUFPO0VBQ3hCLElBQUksQ0FBQ0EsQ0FBRCxJQUFNQSxDQUFDLEtBQUssSUFBaEIsRUFBc0IsT0FBTyxLQUFQOztFQUV0QixJQUFJO0lBQ0YsSUFBSUEsQ0FBQyxLQUFLLGVBQVYsRUFBMkIsT0FBT0EsQ0FBUDtJQUMzQixJQUFJQyxDQUFDLEdBQUcsSUFBSUgsR0FBSixDQUFRRSxDQUFSLENBQVI7SUFDQSxPQUFPQyxDQUFDLENBQUNDLElBQVQ7RUFDRCxDQUpELENBSUUsT0FBT0MsR0FBUCxFQUFZO0lBQ1osT0FBTyxLQUFQO0VBQ0Q7QUFDRixDQVZEOztBQVlBLE1BQU1DLFVBQU4sQ0FBaUI7RUFDZkMsV0FBVyxDQUFDQyxPQUFELEVBQVVDLFdBQVYsRUFBdUI7SUFDaEMsSUFBSUMsWUFBWSxHQUFHVCxVQUFVLENB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